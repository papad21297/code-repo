3 วิเคราะห์ระบบ System Analysis ศึกษาขั้นตอนการดำเนินการของระบบเดิมเพื่อปัญหาที่เกิดขึ้น รวบรวมความต้องการในระบบใหม่จากผู้ใช้ระบบแล้วนำความต้องการเหล่านั้นมาศึกษาและวิเคราะห์เพื่อแก้ปัญหาดังกล่าว ด้วยการใช้แบบจำลองต่าง ๆ ช่วยในการวิเคราะห์
เริ่มจากทำการศึกษาถึงขั้นตอนการดำเนินงานของระบบเดิมหรือระบบปัจจุบันว่าเป็นไปอย่างไรบ้าง ปัญหาที่เกิดขึ้นคืออะไร หลังจากนั้นจึงรวบรวมความต้องการในระบบใหม่จากผู้ใช้ระบบ โดยอาจจะมีการใช้เทคนิคในการเก็บรวมรวมข้อมูลเช่น การออกแบบสอบถาม การสัมภาษณ์ จากนั้นนำข้อมูลที่รวบรวมได้มาทำการวิเคราะห์ด้วยการจำลองแบบข้อมูลเหล่านั้น ได้แก่ แบบจำลองขั้นตอนการทำงานของระบบ (Process Model) แบบจำลองข้อมูล (Data Model) โดยมีการใช้เครื่องมือในการจำลองแบบชนิดต่าง ๆ เช่น แผนภาพกระแสข้อมูล (Data Flow Diagram) แผนภาพแสดงความสัมพันธ์ระหว่างข้อมูล (Entity Relationship Diagram) เป็นต้น
สรุป การทำงานในขั้นตอนการวิเคราะห์ระบบ (System Analysis)
กิจกรรม
1. ศึกษาขั้นตอนการทำงานของระบบเดิม
2. กำหนดความต้องการในระบบใหม่จากผู้ใช้ระบบ
3. จำลองแบบขั้นตอนการทำงาน
4. อธิบายขั้นตอนการทำงานของระบบ
5. จำลองแบบข้อมูล
ตัวอย่างแผนภาพ เครื่องมือและเทคนิคใช้
1. เทคนิคการรวบรวมสารสนเทศและข้อเท็จจริง (fact-finding and information gathering)
2. แผนภาพกระแสข้อมูล (data flow diagram)
1. แผนภาพแสดงความสัมพันธ์ (E.R.-diagram)
2. พจนานุกรมข้อมูล (data dictionary)
3. ตัวต้นแบบ (prototyping)
4. ผังงานระบบ (system flowcharts)
5. เครื่องมือช่วยในการวิเคราะห์และออกแบบระบบ (CASE tools)
4. ออกแบบเชิงตรรกะ (Logical Design) เป็นขั้นตอนในการออกแบบลักษณะการทำงานของระบบตามทางเลือกที่ได้ทำการเลือกไว้จากขั้นตอนการวิเคราะห์ระบบ โดยการออกแบบในเชิงตรรกะนี้ยังไม่ได้
มีการระบุถึงคุณลักษณะของอุปกรณ์ที่จะนำมาใช้ เพียงแต่กำหนดถึงลักษณะของรูปแบบรายงานที่เกิดจากการทำงานของระบบ ลักษณะของการนำข้อมูลเข้าสู่ระบบและผลลัพธ์ที่ได้จากระบบ
ขั้นตอนการออกแบบเชิงตรรกะจะสัมพันธ์และเชื่อมโยงกับขั้นตอนการวิเคราะห์ระบบเป็นอย่างมาก เนื่องจากอาจจะมีการนำแผนภาพที่แสดงถึงความต้องการของผู้ใช้ระบบที่ได้จากขั้นตอนการวิเคราะห์ระบบมาทำการแปลงเพื่อให้ได้ข้อมูลเฉพาะของการออกแบบ (System Design Specification) ที่สามารถนำไปเขียนโปรแกรมได้สะดวกขึ้น เช่น การออกแบบส่วนนำเข้าข้อมูลและผลลัพธ์นั้นต้องอาศัยข้อมูลที่เป็น data flow ที่ปรากฏอยู่บนแผนภาพกระแสข้อมูลในขั้นตอนการวิเคราะห์ระบบ
สรุป การทำงานในขั้นตอนการออกแบบเชิงตรรกะ (logical design)
กิจกรรม
1. ออกแบบแบบฟอร์มข้อมูลและรายงาน (form/report)
2. ออกแบบ user interface
3. ออกแบบฐานข้อมูลในระดับตรรกะ
ตัวอย่างแผนภาพ เครื่องมือและเทคนิคใช้
1. แผนภาพกระแสข้อมูล (data flow diagram)
2. แผนภาพแสดงความสัมพันธ์ของข้อมูล (E.R.-diagram)
3. พจนานุกรมข้อมูล (data dictionary)
4. ตัวต้นแบบ (prototyping)
5. เครื่องมือช่วยในการวิเคราะห์และออกแบบระบบ (CASE tools)
5. ออกแบบเชิงกายภาพ (physical design) ระบุถึงลักษณะการทำงานของระบบทางกายภาพหรือทางเทคนิค โดยระบุถึงคุณลักษณะของอุปกรณ์ที่จะนำมาใช้เทคโนโลยี โปรแกรมภาษาที่จะนำมาใช้เขียนโปรแกรม ฐานข้อมูล ระบบปฏิบัติการ และระบบเครือข่ายที่เหมาะสม สิ่งที่ได้จากขั้นตอนการออกแบบทางกายภาพนี้จะเป็นข้อมูลเฉพาะของการออกแบบ (system design specification) เพื่อส่งมอบให้กับโปรแกรมเมอร์เพื่อใช้เขียนโปรแกรมตามลักษณะการทำงานของระบบที่ได้ออกแบบและกำหนดไว้
ทั้งนี้ ในการออกแยยที่นอกเหนือจากที่กล่าวมานี้ ขึ้นอยู่กับระบบขององค์กรว่าจะต้องมีการเพิ่มเติม รายละเอียดส่วนใดบ้าง แต่ควรจะมีการออกแบบระบบความปลอดภัยในการใช้ระบบด้วย โดยการกำหนดสิทธิในการใช้งานข้อมูลที่อยู่ในระบบของข้อมูลผู้ใช้ตามลำดับความสำคัญ เพื่อป้องกันการนำข้อมูลไปใช้ในทางที่ไม่ถูกต้อง นอกจากนี้นักวิเคราะห์ระบบอาจจะมีการตรวจสอบความพึงพอใจในรูปแบบและลักษณะการทำงานที่ออกแบบไว้ โดยอาจจะมีการสร้างตัวต้นแบบ (prototype) เพื่อให้ผู้ใช้ได้ทดลองใช้งาน
สรุป การทำงานในขั้นตอนการออกแบบทางกายภาพ (physical design)
กิจกรรม
1. ออกแบบฐานข้อมูลในระดับกายภาพ
2. ออกแบบ application
ตัวอย่างแผนภาพ เครื่องมือ และเทคนิคที่ใช้
1. แผนภาพกระแสข้อมูล (data flow diagram)
2. แผนภาพแสดงความสัมพันธ์ของข้อมูล (E.R.-diagram)
3. พจนานุกรมข้อมูล (data dictionary)
4. ตัวต้นแบบ (prototyping)
5. เครื่องมือช่วยในการวิเคราะห์และออกแบบระบบ (CASE tools)
6. พัฒนาและติดตั้งระบบ (system implementations) เป็นการนำระบบที่ออกแบบแล้วมาทำการเขียนโปรแกรมเพื่อให้เป็นไปตามคุณลักษณะและรูปแบบต่าง ๆ ที่ได้กำหนดไว้หลังจากเขียนโปรแกรมเรียบร้อยแล้ว นักวิเคราะห์จะต้องทำการทดสอบโปรแกรม ตรวจสอบหาข้อผิดพลาดของโปรแกรมที่พัฒนาขึ้นมา และสุดท้ายคือการติดตั้งระบบไม่ว่าจะเป็นระบบใหม่หรือเป็นการพัฒนาระบบเดิมที่มีอยู่แล้ว โดยทำการติดตั้งตัวโปรแกรม ติดตั้งอุปกรณ์ พร้อมทั้งจัดทำคู่มือและจัดเตรียมหลักสูตร อบรมให้แก่ ผู้ใช้งานที่เกี่ยวข้อง
เริ่มจากการเขียนโปรแกรมซึ่งโปรแกรมเมอร์จะได้รับชุดเอกสารที่เกิดขึ้นตั้งแต่ขั้นตอนการออกแบบ โดยเฉพาะข้อมูลส่วนของการออกแบบที่จะช่วยให้การเขียนโปรแกรมง่ายขึ้น หลังจากนั้นจะต้องมีการทดสอบโปรแกรมเพื่อหาข้อผิดพลาดที่เกิดขึ้นและทำการแก้ไขเบื้องต้น เมื่อโปรแกรมผ่านการทดสอบแล้ว กิจกรรมต่อไปคือการติดตั้งระบบใหม่ พร้อมทั้งจัดทำคู่มือประกอบการใช้โปรแกรม จัดหลักสูตรฝึกอบรมผู้ใช้ระบบและคอยช่วยเหลือในระหว่างการทำงาน
สรุป การทำงานในขั้นตอนพัฒนาและติดตั้งระบบ (System Implementation)
กิจกรรม
1. เขียนโปรแกรม (coding)
2. ทดสอบโปรแกรม (testing)
3. ติดตั้งระบบ (installation)
4. จัดทำเอกสาร (documentation)
5. ฝึกอบรม (testing)
6. บริการให้ความช่วยเหลือหลังการติดตั้ง (support)
ตัวอย่างแผนภาพ เครื่องมือและเทคนิคที่ใช้
1. โปรแกรมช่วยสอน (computer and instruction: CAI)
2. ระบบคอมพิวเตอร์เพื่อการฝึกอบรม (computer-based training: CBT)
3. ระบบการฝึกอบรมผ่านเว็บ (web-based training: WBT)
4. โปรแกรมแก้ไขข้อผิดพลาด (debugging system)
7. ซ่อมบำรุงระบบ (system maintenance) เป็นขั้นตอนสุดท้ายของวงจรพัฒนาระบบ (SDLC) หลังจากระบบใหม่ได้เริ่มดำเนินการ ผู้ใช้ระบบอาจจะพบกับปัญหาที่เกิดขึ้นเนื่องจากความไม่คุ้นเคยกับระบบใหม่ และอาจค้นพบวิธีการแก้ไขปัญหานั้นเพื่อให้ตรงกับความต้องการของผู้ใช้เอง ดังนั้น นักวิเคราะห์ระบบและโปรแกรมเมอร์จะต้องคอยแก้ไขและเปลี่ยนแปลงระบบที่พัฒนาขึ้นมาจนกว่าจะเป็นที่พอใจของผู้ใช้ระบบมากที่สุด ปัญหาที่ผู้ใช้ระบบค้นพบระหว่ายการดำเนินการนั้นเป็นผลดีในการทำให้ระบบใหม่มีประประสิทธิภาพมากยิ่งขึ้น เนื่องจากผู้ใช้ระบบเป็นผู้ที่เข้าใจในการทำงานทางธุรกิจเป็นอย่างดี ซึ่งสามารถให้คำตอบได้ว่าระบบที่พัฒนามานั้นตรงต่อความต้องการหรือไม่
เริ่มจากการมีการใช้งานระบบใหม่ที่ได้ติดตั้งแล้วในระยะแรก ผู้ใช้จะพบกับปัญหาที่เกิดขึ้น ซึ่งอาจจะมีการทำบันทึกปัญหาเหล่านั้นไว้เพื่อส่งให้นักวิเคราะห์ระบบและโปรแกรมเมอร์ทำการแก้ไขต่อไป ซึ่งเป็นเรื่องปกติที่จะมีการปรับปรุงเปลี่ยนแปลง และแก้ไขระบบที่เพิ่มมีการติดตั้งงานในระยะเริ่มต้น โดยนักวิเคราะห์ระบบจะทำการพิจารณาถึงปัญหาเหล่านั้นเพื่อหาแนวทางแก้ไขต่อไปนี้
สรุป การทำงานในขั้นตอนการบำรุงรักษาระบบ (system maintenance)
กิจกรรม
1. เก็บรวมรวมคำร้องขอให้ปรับปรุงระบบ
2. วิเคราะห์ข้อมูลคำร้องขอเพื่อการปรับปรุง
3. ออกแบบการทำงานที่ต้องการปรับปรุง
4. ปรับปรุงระบบ
ตัวอย่างแผนภาพ เครื่องมือและเทคนิคที่ใช้
แบบฟอร์มแจ้งข้อผิดพลาดของระบบ
5. เครื่องมือสนับสนุนการพัฒนาระบบ (computer-aided systems engineering tools: CASE tools)
แม้ว่าในแต่ละขั้นตอนของการพัฒนาระบบ จะมีการนำเทคนิค แบบจำลอง และแผนภาพ ชนิดต่าง ๆ อธิบายแทนข้อมูลเอกสารที่เป็นข้อความอธิบายลักษณะการทำงานของระบบ และวิธีแก้ไขปัญหาที่เกิดขึ้นก็ตาม หากขั้นตอนในการทำงานเหล่านี้สามารถลดระยะเวลาลงได้ จะทำให้สามารถเพิ่มเวลาในขั้นตอนอื่น ที่เห็นว่าควรใส่ใจในรายละเอียดเพิ่มขึ้นได้ ส่งผลให้การพัฒนาระบบมีความถูกต้อง
ปัจจุบันมีซฟอต์แวร์ที่ช่วยสร้างแผนภาพรายงานโค้ดโปรแกรม ในระหว่างการวิเคราะห์และออกแบบระบบให้เป็นไปโดยอัตโนมัติ นั่นคือ computer-aided systems engineering (CASE) ซึ่งเป็นโปรแกรมประยุกต์หรือซอฟต์แวร์ชนิดหนึ่งของเทคโนโลยี ที่ช่วยในการพัฒนาระบบ คอยสนับสนุนการทำงานในแต่ละขั้นตอนของการพัฒนา ด้วยการเตรียมฟังก์ชันการทำงานต่าง ๆ ที่ทำให้การทำงานแต่ละขั้นตอนมีความรวดเร็วและมีคุณภาพมากขึ้น
CASE จะช่วยแบ่งเบาภาระของนักวิเคราะห์ระบบได้มาก ตั้งแต่การช่วยสร้าง context diagram, flowchart, E.R.-diagram สร้างรายงานและแบบฟอร์ม ตลอดจนการสร้างโค้ดโปรแกรม (source code) ให้อัตโนมัติอีกด้วย
5.1 ขอบข่ายของเครื่องมือสนับสนุนการพัฒนาระบบ (CASE tool framework)
CASE ที่ใช้ในการพัฒนาระบบถูกแบ่งขอบข่ายการทำงานออกเป็น 2 ช่วง โดยการแบ่งนั้นอ้างอิงจากขั้นตอนการพัฒนาระบบในวงจร SDLC ซึ่งมีดังต่อไปนี้
uppercase-CASE: เป็นเครื่องมือที่ช่วยสนับสนุนการทำงานในขั้นตอนต้น ๆ ของการพัฒนาระบบ ได้แก่ ขั้นตอนการวางแผน ขั้นตอนการวิเคราะห์ และขั้นตอนการออกแบบระบบ
lowercase-CASE: เป็นเครื่องมือที่ช่วยสนับสนุนการทำงานในขั้นตอนสุดท้ายในการพัฒนาระบบ ได้แก่ ขั้นตอนการออกแบบ ขั้นตอนการพัฒนาและทดสอบระบบ และขั้นตอนการให้บริการหลังการติดตั้งระบบ จะเห็นว่า CASE ทั้งสอบระดับนี้ มีการทำงานที่ซ้ำซ้อนกันอยู่ บางครั้งองค์กรอาจเลือกใช้งาน CASE tools ทั้งสองระดับร่วมกันได้
5.2 คุณสมบัติและความสารถของ CASE (facilities and functions)
ในการทำงานของ CASE จะมีการเรียกใช้ข้อมูลจาก repository ซึ่งจะทำให้ CASE มีความสามรถและจัดเตรียมสิ่งอำนวยความสะดวกให้ดับนักวิเคราะห์ระบบในการพัฒนาระบบได้ ดังนี้
1. เครื่องมือช่วยสร้างแผนภาพ (diagram tools) ใช้ในการเขียนแผนภาพเพื่อจำลองสิ่งต่าง ๆ ของระบบซึ่งสามารถเชื่อมโยงกับแบบจำลองส่วนอื่นได้
2. เครื่องมือช่วยเก็บรายละเอียดต่าง ๆ ของระบบ (description tools) ใช้ในการบันทึก ลบ และแก้ไข รายละเอียดต่าง ๆ ของระบบได้ รวมทั้งยังสามารถแสดงผลลัพธ์ในรูปแบบเอกสารแสดงรายละเอียดได้
3. เครื่องมือช่วยสร้างตัวต้นแบบ (prototyping tools) ใช้ในการสร้างโปรแกรมต้นแบบเพื่อจำลองระบบออกมาทดลองใช้งานได้ในระดับที่สามารถบอกถึงความพอใจของผู้ใช้ได้
4. เครื่องมือช่วยสร้างรายงานแสดงรายละเอียดของแบบจำลอง (inquiry and reporting) ใช้ในการสร้างรายงานรายละเอียดต่าง ๆ ของแบบจำลอง (inquiry and reporting) ใช้ในการสร้างรายงานรายละเอียดต่าง ๆ ของแบบจำลองซึ่งถูกเก็บไว้ใน repository ได้
5. เครื่องมือเพื่อคุณภาพของแบบจำลอง (quality management tools) ช่วยในการสร้างแบบจำลอง เอกสาร และตัวต้นแบบต่าง ๆ ที่ถูกสร้างขึ้นมีคุณภาพ โดยมีการตรวจสอบความถูกต้องและความสอดคล้องกันได้ อีกทั้งอากเกิดข้อผิดพลาดขึ้นเครื่องมือชนิดนี้สามารถบ่งบอกถึงข้อผิดพลาดนั้นได้
6. เครื่องมือสนับสนุนการตัดสินใจ (decision support tools) จัดเตรียมสารสนเทศเพื่อการตัดสินใจที่จะเกิดขึ้นระหว่างการพัฒนาระบบ เช่น ช่วยนักวิเคราะห์ระบบประมาณการและวิเคราะห์ถึงความเป็นไปได้ของแนวทางแก้ไขปัญหา เป็นต้น
7. เครื่องมือช่วยจัดการเอกสาร (documentation organization tools) ใช้ในการสร้าง จัดการ และแสดงรายงานสารสนเทศต่าง ๆ ซึ่งถูกเก็บไว้ใน repository เพื่อนำเสนอต่อผู้บริหารและผู้ใช้ระบบได้
8. เครื่องมือช่วยออกแบบ (design generation tools) ใช้ในการออกแบบระบบคร่าว ๆ ในเบื้องต้นได้ ภายใต้ความต้องการที่รวบรวมมาแล้ว เช่น CASE สามารถออกแบบฐานข้อมูลที่ได้สร้างแบบจำลองข้อมูลมาแล้ว
9. เครื่องมือช่วยสร้างโค้ดโปรแกรม (code generator tools) ใช้ในการสร้างโค้ดของโปรแกรมทั้งหมดหรือสามารถสร้างเพียงบางส่วนได้
10. เครื่องมือช่วยทดสอบ (testing tools) ช่วยให้นักวิเคราะห์และโปรแกรมเมอร์สามารถทดสอบโปรแกรมได้รวดเร็วยิ่งขึ้น
11. เครื่องมือช่วยให้สามารถใช้ข้อมูลร่วมกัน (data sharing tools) เตรียการนำเข้า (import) และนำออก (export) ของสารสนเทศระหว่าง CASE tools ที่ต่างกันได้คุณสมบัติและความสามารถของ CASE เป็นสิ่งที่คอยอำนวยความสะดวกให้กับนักวิเคราะห์ระบบในการพัฒนาระบบ ซึ่งจะช่วยให้การทำงานมีความสะดวก รวดเร็ว และถูกต้องมากยิ่งขึ้น
5.4 ประโยชน์ที่ได้จากการใช้ CASE
การเลือกใช้ CASE ช่วยในการพัฒนาระบบนั้นสามารถแบ่งเบาการทำงานของนักวิเคราะห์ระบบ ช่วยให้เอกสารหรือแผนภาพต่าง ๆ ที่จัดทำขึ้น ดูเป็นระเบียบเรียบร้อยและมีคุณภาพ ที่สำคัญคือช่วยลดเวลาในการทำงานได้มาก นอกจากนี้แล้วส่งผลให้เกิดประโยชน์ต่าง ๆ ดังนี้
1. มีการพัฒนาคุณภาพในการทำงาน เนื่องจาก CASE สามารถตรวจสอบความถูกต้องสมบูรณ์ของแผนภาพและโปรแกรมได้
2. มีการสร้างเอกสารที่ดี
3. ประหยัดเวลาในการบำรุงรักษาให้ข้อมูลนั้นเป็นปัจจุบันมากที่สุด เพียงเข้าไปทำการแก้ไขในฐานข้อมูล repository เท่านั้นก็สามารถสร้างเอกสารให้เป็นปัจจุบันได้ โดยไม่ต้องตามไปแก้ไขเอกสารที่เกี่ยวข้องทั้งหมดเอง
6. ปัจจัยที่มีผลกระทบต่อนักวิเคราะห์ระบบ
6.1 แหล่งปัจจัยที่สามจากภายนอก (external third party)
1. แหล่งข้อมูลภายนอกองค์กร (outsourcing) แบ่งลักษณะได้ดังนี้
1.1 ว่าจ้างบุคคลภายนอกองค์กรมาทำการพัฒนาระบบ โดยลักษณะการว่าจ้างนั้น อาจมีได้หลายรูปแบบ ตามความเหมาะสมขององค์กร เช่น
พัฒนาทั้งโครงการ โดยการให้นักวิเคราะห์ระบบจากภายนอกมาเข้าดำเนินการพัฒนาระบบขององค์กรทั้งหมดตั้งแต่ต้นจนเสร็จสิ้นโครงการ ซึ่งจะมีคนในองค์กรคอยให้ข้อมูลแก่นักวิเคราะห์ระบบทีมนั้น ลักษณะการจ้างงานแบบนี้ จะเป็นโครงการ (project) ที่ไม่ได้เป็นลูกจ้างประจำ ดังนั้น เมื่อทำการพัฒนาเสร็จสิ้นตามขั้นตอนที่ทีมพัฒนาระบบจากภายนอกได้วางแผนไว้แล้ว ก็หมดสัญญาการว่าจ้าง
พัฒนาบางขั้นตอนของโครงการ เช่น ว่าจ้างเพื่อให้นักวิเคราะห์ระบบดำเนินการเพียงการวิเคราะห์ปัญหาที่ได้กำหนดไว้แล้ว โดยทีมงานในองค์กรเอง หรือว่าจ้างเพื่อดำเนินการเพียงขั้นตอนของการออกแบบระบบ เป็นต้น
1.2 การซื้อโปรแกรมประยุกต์สำเร็จรูป (application software package) มาใช้ในระบบ
ข้อดีของการ outsourcing
1. ลดต้นทุน (cost reduction) เนื่องจากกลุ่มบุคคลผู้รับพัฒนาระบบภายนอกองค์กรบางรายมีการเตรียมวิธีการแก้ปัญหา (solution) ไว้บ้างแล้ว หากองค์กรเลือกใช้ เพียงแต่แก้ไขเล็กน้อยเท่านั้น กลุ่มธุรกิจเหล่านี้มีการแข่งขันสูง จึงมักเสนอเทคโนโลยีสมัยใหม่ในราคาถูกเพี่อเรียกร้องความสนใจจากลูกค้า
2. สามารถเลือก outsourcing ได้ เพราะกลุ่มบุคคลผู้รับพัฒนาระบบภายนอกองค์กรแต่ละรายนั้นต่างก็แข่งขันเพื่อการครอบครองลูกค้าให้ได้มากที่สุด ดังนั้นกลุ่มที่ได้เปรียบคือกลุ่มองค์กรที่ต้องการพัฒนาระบบ เพราะมีโอกาสเลือกบริษัทผู้พัฒนาระบบภายนอกที่เหมาะสมและดีที่สุดสำหรับองค์กร
3. สามารถควบคุมงบประมาณได้ เนื่องจากก่อนที่องค์กรจะตกลงกับการ outsourcing จะมีการสอบราคาตามงบประมาณตามที่ตั้งไว้เท่านั้น
ข้อเสียของการเลือก outsourcing
1. มีความเสี่ยงที่ข้อมูลขององค์กรอาจถูกเปิดเผย เนื่องจากทีมพัฒนาระบบมาจากบุคคลภายนอก
2. การบำรุงรักษาระบบไม่เต็มที่ เนื่องจากทีมพัฒนาระบบไม่ได้ประจำอยู่ในองค์กร หากเลือกกลุ่ม outsourcing ที่มีบริการหลังการขายไม่ดี จะทำให้การทำงานหลังจากติดตั้งระบบแล้วเป็นไปค่อนข้างลำบาก
6.2 การพัฒนาการขององค์กร
การพัฒนาการขององค์กรเป็นอีกปัจจัยหนึ่งที่มีผลกระทบต่อนักวิเคราะห์ระบบ เนื่องจากเป็นการเปลี่ยนแปลงเพื่อก้าวไปสู่คุณภาพในระดับสากลขององค์กร โดยอาจเป็นการเปลี่ยนแปลงในด้านขั้นตอนการดำเนินงาน การนำเทคโนโลยีต่าง ๆ เข้ามาใช้เพื่อเพิ่มประสิทธิภาพของการทำงาน หรืออาจเป็นการนำกลยุทธ์การพัฒนาองค์กรในด้านต่าง ๆ เข้ามาใช้ เป็นต้น ทำให้นักวิเคราะห์จะต้องปรับตัวตามการเปลี่ยนแปลงดังนี้ เนื่องจากนักวิเคราะห์ระบบสมัยใหม่ถูกกำหนดให้เป็นผู้ช่วยแก้ปัญหาต่าง ๆ ให้กับองค์กรนั่นเอง ตัวอย่างการพัฒนาการขององค์กรหลัก ได้แก่ TQM, BRP, CPI เป็นต้น
